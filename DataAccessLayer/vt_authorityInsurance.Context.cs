//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class vt_authorityInsuranceEntities : DbContext
    {
        public vt_authorityInsuranceEntities()
            : base("name=vt_authorityInsuranceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<area> areas { get; set; }
        public virtual DbSet<attachment> attachments { get; set; }
        public virtual DbSet<attachmentType> attachmentTypes { get; set; }
        public virtual DbSet<balanceTybe> balanceTybes { get; set; }
        public virtual DbSet<card> cards { get; set; }
        public virtual DbSet<cardsRequest> cardsRequests { get; set; }
        public virtual DbSet<cardsStatu> cardsStatus { get; set; }
        public virtual DbSet<career> careers { get; set; }
        public virtual DbSet<center> centers { get; set; }
        public virtual DbSet<companyCardRequest> companyCardRequests { get; set; }
        public virtual DbSet<contractor> contractors { get; set; }
        public virtual DbSet<documentType> documentTypes { get; set; }
        public virtual DbSet<extractType> extractTypes { get; set; }
        public virtual DbSet<goverment> goverments { get; set; }
        public virtual DbSet<legalEntity> legalEntities { get; set; }
        public virtual DbSet<medicalStatu> medicalStatus { get; set; }
        public virtual DbSet<officeInsurance> officeInsurances { get; set; }
        public virtual DbSet<oppositionType> oppositionTypes { get; set; }
        public virtual DbSet<processType> processTypes { get; set; }
        public virtual DbSet<referenceSideContractor> referenceSideContractors { get; set; }
        public virtual DbSet<screenType> screenTypes { get; set; }
        public virtual DbSet<skillDegree> skillDegrees { get; set; }
        public virtual DbSet<statusFirstAttendMonthWSDL> statusFirstAttendMonthWSDLs { get; set; }
        public virtual DbSet<stopStatu> stopStatus { get; set; }
        public virtual DbSet<village> villages { get; set; }
        public virtual DbSet<missionSubContractor> missionSubContractors { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<manPower> manPowers { get; set; }
        public virtual DbSet<medicalInsurance> medicalInsurances { get; set; }
        public virtual DbSet<extractProcess> extractProcesses { get; set; }
        public virtual DbSet<migrehab> migrehabs { get; set; }
        public virtual DbSet<processNote> processNotes { get; set; }
        public virtual DbSet<processOpposition> processOppositions { get; set; }
        public virtual DbSet<processSite> processSites { get; set; }
        public virtual DbSet<processStop> processStops { get; set; }
        public virtual DbSet<processSubContractor> processSubContractors { get; set; }
        public virtual DbSet<processUserLettersSite> processUserLettersSites { get; set; }
        public virtual DbSet<processUser> processUsers { get; set; }
        public virtual DbSet<specialProcess> specialProcesses { get; set; }
        public virtual DbSet<apiUserRequest> apiUserRequests { get; set; }
        public virtual DbSet<apiUser> apiUsers { get; set; }
        public virtual DbSet<function> functions { get; set; }
        public virtual DbSet<group> groups { get; set; }
        public virtual DbSet<groupAreaOfficeSetting> groupAreaOfficeSettings { get; set; }
        public virtual DbSet<groupPermission> groupPermissions { get; set; }
        public virtual DbSet<groupUser> groupUsers { get; set; }
        public virtual DbSet<module> modules { get; set; }
        public virtual DbSet<permissionAreaOffice> permissionAreaOffices { get; set; }
        public virtual DbSet<treeColor> treeColors { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<userType> userTypes { get; set; }
        public virtual DbSet<cardsRequestWorker> cardsRequestWorkers { get; set; }
        public virtual DbSet<cardWorkerStopActive> cardWorkerStopActives { get; set; }
        public virtual DbSet<workerAttendanceInsurance> workerAttendanceInsurances { get; set; }
        public virtual DbSet<workerContact> workerContacts { get; set; }
        public virtual DbSet<workerDetail> workerDetails { get; set; }
        public virtual DbSet<workerInjury> workerInjuries { get; set; }
        public virtual DbSet<workerOfficeInsurance> workerOfficeInsurances { get; set; }
        public virtual DbSet<workerPeriod> workerPeriods { get; set; }
        public virtual DbSet<smsReturn> smsReturns { get; set; }
        public virtual DbSet<orascomWorker> orascomWorkers { get; set; }
        public virtual DbSet<orascomWorkers2> orascomWorkers2 { get; set; }
        public virtual DbSet<worker> workers { get; set; }
        public virtual DbSet<orascomWorkers3> orascomWorkers3 { get; set; }
        public virtual DbSet<statusCoverWSDL> statusCoverWSDLs { get; set; }
        public virtual DbSet<workerAttendance> workerAttendances { get; set; }
        public virtual DbSet<process> processes { get; set; }
    
        [DbFunction("vt_authorityInsuranceEntities", "spGetPermissionAreaOffice")]
        public virtual IQueryable<spGetPermissionAreaOffice_Result> spGetPermissionAreaOffice(string areaCode, Nullable<int> officeUserCode)
        {
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(string));
    
            var officeUserCodeParameter = officeUserCode.HasValue ?
                new ObjectParameter("officeUserCode", officeUserCode) :
                new ObjectParameter("officeUserCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<spGetPermissionAreaOffice_Result>("[vt_authorityInsuranceEntities].[spGetPermissionAreaOffice](@areaCode, @officeUserCode)", areaCodeParameter, officeUserCodeParameter);
        }
    
        [DbFunction("vt_authorityInsuranceEntities", "UTILfn_Split")]
        public virtual IQueryable<UTILfn_Split_Result> UTILfn_Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<UTILfn_Split_Result>("[vt_authorityInsuranceEntities].[UTILfn_Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<spGetDocumentTypesWithSpecialCodes_Result> spGetDocumentTypesWithSpecialCodes(string documentTypes)
        {
            var documentTypesParameter = documentTypes != null ?
                new ObjectParameter("documentTypes", documentTypes) :
                new ObjectParameter("documentTypes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDocumentTypesWithSpecialCodes_Result>("spGetDocumentTypesWithSpecialCodes", documentTypesParameter);
        }
    
        public virtual ObjectResult<CompanyCard_Result> CompanyCard(string dateFrom, string dateTo, string cardStatus, string cardRequestName)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var cardStatusParameter = cardStatus != null ?
                new ObjectParameter("CardStatus", cardStatus) :
                new ObjectParameter("CardStatus", typeof(string));
    
            var cardRequestNameParameter = cardRequestName != null ?
                new ObjectParameter("CardRequestName", cardRequestName) :
                new ObjectParameter("CardRequestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyCard_Result>("CompanyCard", dateFromParameter, dateToParameter, cardStatusParameter, cardRequestNameParameter);
        }
    
        public virtual ObjectResult<GetEmployeeNotificationProcess_Result> GetEmployeeNotificationProcess(Nullable<int> userCode)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeNotificationProcess_Result>("GetEmployeeNotificationProcess", userCodeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeNotificationProcessStop_Result> GetEmployeeNotificationProcessStop(Nullable<int> userCode)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeNotificationProcessStop_Result>("GetEmployeeNotificationProcessStop", userCodeParameter);
        }
    
        public virtual ObjectResult<GetMissionSubContractor_Result> GetMissionSubContractor(Nullable<int> processCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMissionSubContractor_Result>("GetMissionSubContractor", processCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spDeleteProcess(Nullable<int> processCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDeleteProcess", processCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spDeleteProcessUsers(string processUserCodes)
        {
            var processUserCodesParameter = processUserCodes != null ?
                new ObjectParameter("processUserCodes", processUserCodes) :
                new ObjectParameter("processUserCodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDeleteProcessUsers", processUserCodesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetContractorCodeByExtracts(Nullable<int> extractCode)
        {
            var extractCodeParameter = extractCode.HasValue ?
                new ObjectParameter("extractCode", extractCode) :
                new ObjectParameter("extractCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetContractorCodeByExtracts", extractCodeParameter);
        }
    
        public virtual ObjectResult<spGetContractorProcesses_Result> spGetContractorProcesses(Nullable<int> userCode)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetContractorProcesses_Result>("spGetContractorProcesses", userCodeParameter);
        }
    
        public virtual ObjectResult<spGetContractorsInProcess_Result> spGetContractorsInProcess(Nullable<int> processCode, string processType)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetContractorsInProcess_Result>("spGetContractorsInProcess", processCodeParameter, processTypeParameter);
        }
    
        public virtual ObjectResult<spGetMainProcessByPNumAndWcodeAndDateInjury_Result> spGetMainProcessByPNumAndWcodeAndDateInjury(string processNum, Nullable<int> workerCode, Nullable<System.DateTime> dateInjury)
        {
            var processNumParameter = processNum != null ?
                new ObjectParameter("processNum", processNum) :
                new ObjectParameter("processNum", typeof(string));
    
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(int));
    
            var dateInjuryParameter = dateInjury.HasValue ?
                new ObjectParameter("dateInjury", dateInjury) :
                new ObjectParameter("dateInjury", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMainProcessByPNumAndWcodeAndDateInjury_Result>("spGetMainProcessByPNumAndWcodeAndDateInjury", processNumParameter, workerCodeParameter, dateInjuryParameter);
        }
    
        public virtual ObjectResult<spGetMissionOfExtracts_Result> spGetMissionOfExtracts(Nullable<int> processCode, Nullable<int> userCode, Nullable<int> contCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var contCodeParameter = contCode.HasValue ?
                new ObjectParameter("contCode", contCode) :
                new ObjectParameter("contCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMissionOfExtracts_Result>("spGetMissionOfExtracts", processCodeParameter, userCodeParameter, contCodeParameter);
        }
    
        public virtual ObjectResult<spGetPreviousPtocessStop_Result> spGetPreviousPtocessStop(Nullable<int> processStopCode, Nullable<int> processCode)
        {
            var processStopCodeParameter = processStopCode.HasValue ?
                new ObjectParameter("processStopCode", processStopCode) :
                new ObjectParameter("processStopCode", typeof(int));
    
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPreviousPtocessStop_Result>("spGetPreviousPtocessStop", processStopCodeParameter, processCodeParameter);
        }
    
        public virtual ObjectResult<string> spGetProcessStopNotActive(Nullable<int> processCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetProcessStopNotActive", processCodeParameter);
        }
    
        public virtual ObjectResult<spGetPtocessStop_Result> spGetPtocessStop(Nullable<int> processCode, Nullable<int> processStopCode, string processStopReason, Nullable<System.DateTime> dateStartProcess, Nullable<System.DateTime> dateEndProcess)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var processStopCodeParameter = processStopCode.HasValue ?
                new ObjectParameter("processStopCode", processStopCode) :
                new ObjectParameter("processStopCode", typeof(int));
    
            var processStopReasonParameter = processStopReason != null ?
                new ObjectParameter("processStopReason", processStopReason) :
                new ObjectParameter("processStopReason", typeof(string));
    
            var dateStartProcessParameter = dateStartProcess.HasValue ?
                new ObjectParameter("dateStartProcess", dateStartProcess) :
                new ObjectParameter("dateStartProcess", typeof(System.DateTime));
    
            var dateEndProcessParameter = dateEndProcess.HasValue ?
                new ObjectParameter("dateEndProcess", dateEndProcess) :
                new ObjectParameter("dateEndProcess", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPtocessStop_Result>("spGetPtocessStop", processCodeParameter, processStopCodeParameter, processStopReasonParameter, dateStartProcessParameter, dateEndProcessParameter);
        }
    
        public virtual ObjectResult<spGetSpecialExtract_Result> spGetSpecialExtract(Nullable<int> extractProcessCode, Nullable<int> processCode, string officeCode, string areaCode, string extractName, string recieverContractor, Nullable<decimal> budget, string extractTypeCode, string missionExpiredTypeCode, Nullable<System.DateTime> from_date, Nullable<System.DateTime> to_date, string processSubContractor)
        {
            var extractProcessCodeParameter = extractProcessCode.HasValue ?
                new ObjectParameter("extractProcessCode", extractProcessCode) :
                new ObjectParameter("extractProcessCode", typeof(int));
    
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("officeCode", officeCode) :
                new ObjectParameter("officeCode", typeof(string));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(string));
    
            var extractNameParameter = extractName != null ?
                new ObjectParameter("extractName", extractName) :
                new ObjectParameter("extractName", typeof(string));
    
            var recieverContractorParameter = recieverContractor != null ?
                new ObjectParameter("recieverContractor", recieverContractor) :
                new ObjectParameter("recieverContractor", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("budget", budget) :
                new ObjectParameter("budget", typeof(decimal));
    
            var extractTypeCodeParameter = extractTypeCode != null ?
                new ObjectParameter("extractTypeCode", extractTypeCode) :
                new ObjectParameter("extractTypeCode", typeof(string));
    
            var missionExpiredTypeCodeParameter = missionExpiredTypeCode != null ?
                new ObjectParameter("missionExpiredTypeCode", missionExpiredTypeCode) :
                new ObjectParameter("missionExpiredTypeCode", typeof(string));
    
            var from_dateParameter = from_date.HasValue ?
                new ObjectParameter("from_date", from_date) :
                new ObjectParameter("from_date", typeof(System.DateTime));
    
            var to_dateParameter = to_date.HasValue ?
                new ObjectParameter("to_date", to_date) :
                new ObjectParameter("to_date", typeof(System.DateTime));
    
            var processSubContractorParameter = processSubContractor != null ?
                new ObjectParameter("processSubContractor", processSubContractor) :
                new ObjectParameter("processSubContractor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSpecialExtract_Result>("spGetSpecialExtract", extractProcessCodeParameter, processCodeParameter, officeCodeParameter, areaCodeParameter, extractNameParameter, recieverContractorParameter, budgetParameter, extractTypeCodeParameter, missionExpiredTypeCodeParameter, from_dateParameter, to_dateParameter, processSubContractorParameter);
        }
    
        public virtual ObjectResult<CheckModuleUserPermisiom_Result> CheckModuleUserPermisiom(Nullable<int> userCode, Nullable<int> parentCode)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(int));
    
            var parentCodeParameter = parentCode.HasValue ?
                new ObjectParameter("ParentCode", parentCode) :
                new ObjectParameter("ParentCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckModuleUserPermisiom_Result>("CheckModuleUserPermisiom", userCodeParameter, parentCodeParameter);
        }
    
        public virtual ObjectResult<GetAllAreas_Result> GetAllAreas(string areaCode, string officeCode)
        {
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(string));
    
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("officeCode", officeCode) :
                new ObjectParameter("officeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAreas_Result>("GetAllAreas", areaCodeParameter, officeCodeParameter);
        }
    
        public virtual ObjectResult<string> GetAreaOfficePermission(Nullable<int> userCode)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAreaOfficePermission", userCodeParameter);
        }
    
        public virtual ObjectResult<GetGroup_Result> GetGroup(string groups)
        {
            var groupsParameter = groups != null ?
                new ObjectParameter("groups", groups) :
                new ObjectParameter("groups", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGroup_Result>("GetGroup", groupsParameter);
        }
    
        public virtual ObjectResult<spGetContractorUserData_Result> spGetContractorUserData(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetContractorUserData_Result>("spGetContractorUserData", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetUserDetails_Result> spGetUserDetails(string userCode)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserDetails_Result>("spGetUserDetails", userCodeParameter);
        }
    
        public virtual ObjectResult<spGetUsersOffice_Result> spGetUsersOffice(Nullable<int> userCode, Nullable<int> num)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersOffice_Result>("spGetUsersOffice", userCodeParameter, numParameter);
        }
    
        public virtual ObjectResult<GetCardWorkerStopActive_Result> GetCardWorkerStopActive(Nullable<int> workerCode, string officeName, string areaName, string reason, string notes, string dateFrom, string dateTo)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("WorkerCode", workerCode) :
                new ObjectParameter("WorkerCode", typeof(int));
    
            var officeNameParameter = officeName != null ?
                new ObjectParameter("OfficeName", officeName) :
                new ObjectParameter("OfficeName", typeof(string));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCardWorkerStopActive_Result>("GetCardWorkerStopActive", workerCodeParameter, officeNameParameter, areaNameParameter, reasonParameter, notesParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetWorkersCardRequest_Result> GetWorkersCardRequest(Nullable<int> cardRequestCode)
        {
            var cardRequestCodeParameter = cardRequestCode.HasValue ?
                new ObjectParameter("CardRequestCode", cardRequestCode) :
                new ObjectParameter("CardRequestCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkersCardRequest_Result>("GetWorkersCardRequest", cardRequestCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetCountWorkerAttendance(Nullable<int> processCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetCountWorkerAttendance", processCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spGetMainWorkerData_Result> spGetMainWorkerData(Nullable<int> workerCode)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMainWorkerData_Result>("spGetMainWorkerData", workerCodeParameter);
        }
    
        public virtual ObjectResult<spGetWorkerInjuries_Result> spGetWorkerInjuries(Nullable<int> workerInjuriesCode, Nullable<int> workerCode, string processNum, string processType, string processSite, string processMainContractorName, string workerInhuryReason, Nullable<System.DateTime> dateStartInjury, Nullable<System.DateTime> dateEndInjury)
        {
            var workerInjuriesCodeParameter = workerInjuriesCode.HasValue ?
                new ObjectParameter("workerInjuriesCode", workerInjuriesCode) :
                new ObjectParameter("workerInjuriesCode", typeof(int));
    
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(int));
    
            var processNumParameter = processNum != null ?
                new ObjectParameter("processNum", processNum) :
                new ObjectParameter("processNum", typeof(string));
    
            var processTypeParameter = processType != null ?
                new ObjectParameter("processType", processType) :
                new ObjectParameter("processType", typeof(string));
    
            var processSiteParameter = processSite != null ?
                new ObjectParameter("processSite", processSite) :
                new ObjectParameter("processSite", typeof(string));
    
            var processMainContractorNameParameter = processMainContractorName != null ?
                new ObjectParameter("processMainContractorName", processMainContractorName) :
                new ObjectParameter("processMainContractorName", typeof(string));
    
            var workerInhuryReasonParameter = workerInhuryReason != null ?
                new ObjectParameter("workerInhuryReason", workerInhuryReason) :
                new ObjectParameter("workerInhuryReason", typeof(string));
    
            var dateStartInjuryParameter = dateStartInjury.HasValue ?
                new ObjectParameter("dateStartInjury", dateStartInjury) :
                new ObjectParameter("dateStartInjury", typeof(System.DateTime));
    
            var dateEndInjuryParameter = dateEndInjury.HasValue ?
                new ObjectParameter("dateEndInjury", dateEndInjury) :
                new ObjectParameter("dateEndInjury", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkerInjuries_Result>("spGetWorkerInjuries", workerInjuriesCodeParameter, workerCodeParameter, processNumParameter, processTypeParameter, processSiteParameter, processMainContractorNameParameter, workerInhuryReasonParameter, dateStartInjuryParameter, dateEndInjuryParameter);
        }
    
        public virtual ObjectResult<GetWorkerAttendInsurance_Result> GetWorkerAttendInsurance(Nullable<int> workerCode)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerAttendInsurance_Result>("GetWorkerAttendInsurance", workerCodeParameter);
        }
    
        public virtual ObjectResult<checkWorkerAttendance_Result> checkWorkerAttendance(Nullable<int> workerCode)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<checkWorkerAttendance_Result>("checkWorkerAttendance", workerCodeParameter);
        }
    
        public virtual int worker_data_update_ims(string data, Nullable<int> userCode)
        {
            var dataParameter = data != null ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(string));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("worker_data_update_ims", dataParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<GetWorkerCardInformation_Result> GetWorkerCardInformation(string nationalNumber, string insuranceNumber)
        {
            var nationalNumberParameter = nationalNumber != null ?
                new ObjectParameter("NationalNumber", nationalNumber) :
                new ObjectParameter("NationalNumber", typeof(string));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerCardInformation_Result>("GetWorkerCardInformation", nationalNumberParameter, insuranceNumberParameter);
        }
    
        public virtual ObjectResult<GetWorkerCardsNumbers_Result> GetWorkerCardsNumbers(Nullable<int> workerCode)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("WorkerCode", workerCode) :
                new ObjectParameter("WorkerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerCardsNumbers_Result>("GetWorkerCardsNumbers", workerCodeParameter);
        }
    
        public virtual ObjectResult<GetOneWork_Result> GetOneWork(Nullable<int> workerCode)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("WorkerCode", workerCode) :
                new ObjectParameter("WorkerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneWork_Result>("GetOneWork", workerCodeParameter);
        }
    
        public virtual ObjectResult<GetCardsRequest_Result> GetCardsRequest(string officeCodes, string areas, string cardsStatus, string dateRecive, string dateDelivery, string dateRequest, string requestName)
        {
            var officeCodesParameter = officeCodes != null ?
                new ObjectParameter("OfficeCodes", officeCodes) :
                new ObjectParameter("OfficeCodes", typeof(string));
    
            var areasParameter = areas != null ?
                new ObjectParameter("Areas", areas) :
                new ObjectParameter("Areas", typeof(string));
    
            var cardsStatusParameter = cardsStatus != null ?
                new ObjectParameter("CardsStatus", cardsStatus) :
                new ObjectParameter("CardsStatus", typeof(string));
    
            var dateReciveParameter = dateRecive != null ?
                new ObjectParameter("DateRecive", dateRecive) :
                new ObjectParameter("DateRecive", typeof(string));
    
            var dateDeliveryParameter = dateDelivery != null ?
                new ObjectParameter("DateDelivery", dateDelivery) :
                new ObjectParameter("DateDelivery", typeof(string));
    
            var dateRequestParameter = dateRequest != null ?
                new ObjectParameter("DateRequest", dateRequest) :
                new ObjectParameter("DateRequest", typeof(string));
    
            var requestNameParameter = requestName != null ?
                new ObjectParameter("requestName", requestName) :
                new ObjectParameter("requestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCardsRequest_Result>("GetCardsRequest", officeCodesParameter, areasParameter, cardsStatusParameter, dateReciveParameter, dateDeliveryParameter, dateRequestParameter, requestNameParameter);
        }
    
        public virtual ObjectResult<GetWorkerProcess_Result> GetWorkerProcess(Nullable<int> workerCode)
        {
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("WorkerCode", workerCode) :
                new ObjectParameter("WorkerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerProcess_Result>("GetWorkerProcess", workerCodeParameter);
        }
    
        public virtual ObjectResult<GetWorkerInformation_Result> GetWorkerInformation(string nationalNumber, string insuranceNumber, Nullable<System.DateTime> date, Nullable<int> processCode)
        {
            var nationalNumberParameter = nationalNumber != null ?
                new ObjectParameter("NationalNumber", nationalNumber) :
                new ObjectParameter("NationalNumber", typeof(string));
    
            var insuranceNumberParameter = insuranceNumber != null ?
                new ObjectParameter("InsuranceNumber", insuranceNumber) :
                new ObjectParameter("InsuranceNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerInformation_Result>("GetWorkerInformation", nationalNumberParameter, insuranceNumberParameter, dateParameter, processCodeParameter);
        }
    
        public virtual ObjectResult<spGetUsersNotInProcess_Result> spGetUsersNotInProcess(Nullable<int> processCode, Nullable<int> contractorType, Nullable<int> userCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var contractorTypeParameter = contractorType.HasValue ?
                new ObjectParameter("contractorType", contractorType) :
                new ObjectParameter("contractorType", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersNotInProcess_Result>("spGetUsersNotInProcess", processCodeParameter, contractorTypeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<spAPIWorkers_Result> spAPIWorkers(Nullable<int> processCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAPIWorkers_Result>("spAPIWorkers", processCodeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<string> spAcceptSubContractor(Nullable<int> processCode, Nullable<int> processSubContractorCode, Nullable<int> userCodeAccept, string ipAccept)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var processSubContractorCodeParameter = processSubContractorCode.HasValue ?
                new ObjectParameter("processSubContractorCode", processSubContractorCode) :
                new ObjectParameter("processSubContractorCode", typeof(int));
    
            var userCodeAcceptParameter = userCodeAccept.HasValue ?
                new ObjectParameter("userCodeAccept", userCodeAccept) :
                new ObjectParameter("userCodeAccept", typeof(int));
    
            var ipAcceptParameter = ipAccept != null ?
                new ObjectParameter("ipAccept", ipAccept) :
                new ObjectParameter("ipAccept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spAcceptSubContractor", processCodeParameter, processSubContractorCodeParameter, userCodeAcceptParameter, ipAcceptParameter);
        }
    
        public virtual ObjectResult<spGetAttachmentFolderData_Result> spGetAttachmentFolderData(Nullable<int> attachmentType, Nullable<int> userCode, Nullable<int> contractorBy)
        {
            var attachmentTypeParameter = attachmentType.HasValue ?
                new ObjectParameter("attachmentType", attachmentType) :
                new ObjectParameter("attachmentType", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var contractorByParameter = contractorBy.HasValue ?
                new ObjectParameter("contractorBy", contractorBy) :
                new ObjectParameter("contractorBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttachmentFolderData_Result>("spGetAttachmentFolderData", attachmentTypeParameter, userCodeParameter, contractorByParameter);
        }
    
        public virtual int UpdateNotificationSeen(Nullable<int> userCode, Nullable<int> processCode, Nullable<int> type)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(int));
    
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNotificationSeen", userCodeParameter, processCodeParameter, typeParameter);
        }
    
        public virtual ObjectResult<spGetProcessDataForAttachment_Result> spGetProcessDataForAttachment(Nullable<int> processCode, Nullable<int> userCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProcessDataForAttachment_Result>("spGetProcessDataForAttachment", processCodeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<spGetAllContractorsAndRefSide_Result1> spGetAllContractorsAndRefSide(Nullable<int> processCode, Nullable<int> showRefSide)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var showRefSideParameter = showRefSide.HasValue ?
                new ObjectParameter("showRefSide", showRefSide) :
                new ObjectParameter("showRefSide", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllContractorsAndRefSide_Result1>("spGetAllContractorsAndRefSide", processCodeParameter, showRefSideParameter);
        }
    
        public virtual int spInsertAttachmentsProcessStop(Nullable<int> processCode, Nullable<int> userCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertAttachmentsProcessStop", processCodeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetGroupUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetGroupUsers");
        }
    
        public virtual ObjectResult<GetAttendance_Result> GetAttendance(Nullable<int> processCode, string workerName, string date)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            var workerNameParameter = workerName != null ?
                new ObjectParameter("WorkerName", workerName) :
                new ObjectParameter("WorkerName", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttendance_Result>("GetAttendance", processCodeParameter, workerNameParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetWorkerDetails_Result> GetWorkerDetails(Nullable<int> processCode, string office, string area, string contractors, Nullable<int> userCode, Nullable<int> workerCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            var officeParameter = office != null ?
                new ObjectParameter("Office", office) :
                new ObjectParameter("Office", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var contractorsParameter = contractors != null ?
                new ObjectParameter("Contractors", contractors) :
                new ObjectParameter("Contractors", typeof(string));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerDetails_Result>("GetWorkerDetails", processCodeParameter, officeParameter, areaParameter, contractorsParameter, userCodeParameter, workerCodeParameter);
        }
    
        public virtual ObjectResult<GetWorkers_Result> GetWorkers(string workerName, string workerNatId, string workerNatIn, string dateFrom, string dateTo, string careers, string skillDegree, string medicalInsur, Nullable<int> processCode)
        {
            var workerNameParameter = workerName != null ?
                new ObjectParameter("WorkerName", workerName) :
                new ObjectParameter("WorkerName", typeof(string));
    
            var workerNatIdParameter = workerNatId != null ?
                new ObjectParameter("WorkerNatId", workerNatId) :
                new ObjectParameter("WorkerNatId", typeof(string));
    
            var workerNatInParameter = workerNatIn != null ?
                new ObjectParameter("WorkerNatIn", workerNatIn) :
                new ObjectParameter("WorkerNatIn", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var careersParameter = careers != null ?
                new ObjectParameter("Careers", careers) :
                new ObjectParameter("Careers", typeof(string));
    
            var skillDegreeParameter = skillDegree != null ?
                new ObjectParameter("SkillDegree", skillDegree) :
                new ObjectParameter("SkillDegree", typeof(string));
    
            var medicalInsurParameter = medicalInsur != null ?
                new ObjectParameter("MedicalInsur", medicalInsur) :
                new ObjectParameter("MedicalInsur", typeof(string));
    
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkers_Result>("GetWorkers", workerNameParameter, workerNatIdParameter, workerNatInParameter, dateFromParameter, dateToParameter, careersParameter, skillDegreeParameter, medicalInsurParameter, processCodeParameter);
        }
    
        public virtual ObjectResult<GetOfficeInsurance_Result> GetOfficeInsurance(string area, Nullable<int> check)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var checkParameter = check.HasValue ?
                new ObjectParameter("check", check) :
                new ObjectParameter("check", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOfficeInsurance_Result>("GetOfficeInsurance", areaParameter, checkParameter);
        }
    
        public virtual ObjectResult<spAllAreas_Result> spAllAreas(Nullable<int> userCode, Nullable<int> getAll, string areasCodes, Nullable<int> check)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(int));
    
            var getAllParameter = getAll.HasValue ?
                new ObjectParameter("GetAll", getAll) :
                new ObjectParameter("GetAll", typeof(int));
    
            var areasCodesParameter = areasCodes != null ?
                new ObjectParameter("AreasCodes", areasCodes) :
                new ObjectParameter("AreasCodes", typeof(string));
    
            var checkParameter = check.HasValue ?
                new ObjectParameter("check", check) :
                new ObjectParameter("check", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAllAreas_Result>("spAllAreas", userCodeParameter, getAllParameter, areasCodesParameter, checkParameter);
        }
    
        public virtual ObjectResult<spWorkerAttendanceApp_Result> spWorkerAttendanceApp(Nullable<int> processCode, Nullable<int> userInsertCode, string ipInsert, string sQR, string dateAttendence)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var userInsertCodeParameter = userInsertCode.HasValue ?
                new ObjectParameter("userInsertCode", userInsertCode) :
                new ObjectParameter("userInsertCode", typeof(int));
    
            var ipInsertParameter = ipInsert != null ?
                new ObjectParameter("ipInsert", ipInsert) :
                new ObjectParameter("ipInsert", typeof(string));
    
            var sQRParameter = sQR != null ?
                new ObjectParameter("sQR", sQR) :
                new ObjectParameter("sQR", typeof(string));
    
            var dateAttendenceParameter = dateAttendence != null ?
                new ObjectParameter("dateAttendence", dateAttendence) :
                new ObjectParameter("dateAttendence", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spWorkerAttendanceApp_Result>("spWorkerAttendanceApp", processCodeParameter, userInsertCodeParameter, ipInsertParameter, sQRParameter, dateAttendenceParameter);
        }
    
        public virtual int spUpdateWorkerAttendance(string workerAttendanceCode, string statusCodes, string statusDescription, string statusDates)
        {
            var workerAttendanceCodeParameter = workerAttendanceCode != null ?
                new ObjectParameter("workerAttendanceCode", workerAttendanceCode) :
                new ObjectParameter("workerAttendanceCode", typeof(string));
    
            var statusCodesParameter = statusCodes != null ?
                new ObjectParameter("statusCodes", statusCodes) :
                new ObjectParameter("statusCodes", typeof(string));
    
            var statusDescriptionParameter = statusDescription != null ?
                new ObjectParameter("statusDescription", statusDescription) :
                new ObjectParameter("statusDescription", typeof(string));
    
            var statusDatesParameter = statusDates != null ?
                new ObjectParameter("statusDates", statusDates) :
                new ObjectParameter("statusDates", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateWorkerAttendance", workerAttendanceCodeParameter, statusCodesParameter, statusDescriptionParameter, statusDatesParameter);
        }
    
        public virtual ObjectResult<GetWorkerAttendance_Result> GetWorkerAttendance(Nullable<int> processCode, Nullable<int> workerCode, string startyear, string endyear, string startMonth, string endMonth)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            var workerCodeParameter = workerCode.HasValue ?
                new ObjectParameter("WorkerCode", workerCode) :
                new ObjectParameter("WorkerCode", typeof(int));
    
            var startyearParameter = startyear != null ?
                new ObjectParameter("startyear", startyear) :
                new ObjectParameter("startyear", typeof(string));
    
            var endyearParameter = endyear != null ?
                new ObjectParameter("endyear", endyear) :
                new ObjectParameter("endyear", typeof(string));
    
            var startMonthParameter = startMonth != null ?
                new ObjectParameter("startMonth", startMonth) :
                new ObjectParameter("startMonth", typeof(string));
    
            var endMonthParameter = endMonth != null ?
                new ObjectParameter("endMonth", endMonth) :
                new ObjectParameter("endMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerAttendance_Result>("GetWorkerAttendance", processCodeParameter, workerCodeParameter, startyearParameter, endyearParameter, startMonthParameter, endMonthParameter);
        }
    
        public virtual ObjectResult<GetAreaOffice_Result> GetAreaOffice(string areaCode, string officeCode)
        {
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(string));
    
            var officeCodeParameter = officeCode != null ?
                new ObjectParameter("officeCode", officeCode) :
                new ObjectParameter("officeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAreaOffice_Result>("GetAreaOffice", areaCodeParameter, officeCodeParameter);
        }
    
        public virtual ObjectResult<spGetProcessUser_Result> spGetProcessUser(Nullable<int> processCode, Nullable<int> contractorType, Nullable<int> userCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var contractorTypeParameter = contractorType.HasValue ?
                new ObjectParameter("contractorType", contractorType) :
                new ObjectParameter("contractorType", typeof(int));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProcessUser_Result>("spGetProcessUser", processCodeParameter, contractorTypeParameter, userCodeParameter);
        }
    
        public virtual int spUpdateSmsProcessUsers(Nullable<int> processUserCode, Nullable<int> smsReturn, Nullable<System.DateTime> smsReturnDate)
        {
            var processUserCodeParameter = processUserCode.HasValue ?
                new ObjectParameter("processUserCode", processUserCode) :
                new ObjectParameter("processUserCode", typeof(int));
    
            var smsReturnParameter = smsReturn.HasValue ?
                new ObjectParameter("smsReturn", smsReturn) :
                new ObjectParameter("smsReturn", typeof(int));
    
            var smsReturnDateParameter = smsReturnDate.HasValue ?
                new ObjectParameter("smsReturnDate", smsReturnDate) :
                new ObjectParameter("smsReturnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSmsProcessUsers", processUserCodeParameter, smsReturnParameter, smsReturnDateParameter);
        }
    
        public virtual int spUpdateSmsUsers(Nullable<int> userCode, Nullable<int> smsReturn, Nullable<System.DateTime> smsReturnDate)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var smsReturnParameter = smsReturn.HasValue ?
                new ObjectParameter("smsReturn", smsReturn) :
                new ObjectParameter("smsReturn", typeof(int));
    
            var smsReturnDateParameter = smsReturnDate.HasValue ?
                new ObjectParameter("smsReturnDate", smsReturnDate) :
                new ObjectParameter("smsReturnDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSmsUsers", userCodeParameter, smsReturnParameter, smsReturnDateParameter);
        }
    
        public virtual ObjectResult<spGetAreasContractor_Result> spGetAreasContractor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAreasContractor_Result>("spGetAreasContractor");
        }
    
        public virtual ObjectResult<spGetOfficesContractor_Result> spGetOfficesContractor(Nullable<int> areaCode)
        {
            var areaCodeParameter = areaCode.HasValue ?
                new ObjectParameter("areaCode", areaCode) :
                new ObjectParameter("areaCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOfficesContractor_Result>("spGetOfficesContractor", areaCodeParameter);
        }
    
        public virtual int spUpdateOfficesContractorFalse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateOfficesContractorFalse");
        }
    
        public virtual ObjectResult<GetNotifications_Result> GetNotifications(Nullable<int> userCode, string type, string date)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNotifications_Result>("GetNotifications", userCodeParameter, typeParameter, dateParameter);
        }
    
        public virtual ObjectResult<spGetCenterByGovernment_Result> spGetCenterByGovernment(string govCode)
        {
            var govCodeParameter = govCode != null ?
                new ObjectParameter("govCode", govCode) :
                new ObjectParameter("govCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCenterByGovernment_Result>("spGetCenterByGovernment", govCodeParameter);
        }
    
        public virtual ObjectResult<spGetProcessTypes_Result> spGetProcessTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProcessTypes_Result>("spGetProcessTypes");
        }
    
        public virtual ObjectResult<spGetVillagebyCenter_Result> spGetVillagebyCenter(string centerCode)
        {
            var centerCodeParameter = centerCode != null ?
                new ObjectParameter("centerCode", centerCode) :
                new ObjectParameter("centerCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVillagebyCenter_Result>("spGetVillagebyCenter", centerCodeParameter);
        }
    
        public virtual ObjectResult<spGetGoverments_Result> spGetGoverments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGoverments_Result>("spGetGoverments");
        }
    
        public virtual ObjectResult<spGetNotesProcess_Result> spGetNotesProcess(Nullable<int> processsCode)
        {
            var processsCodeParameter = processsCode.HasValue ?
                new ObjectParameter("processsCode", processsCode) :
                new ObjectParameter("processsCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNotesProcess_Result>("spGetNotesProcess", processsCodeParameter);
        }
    
        public virtual ObjectResult<string> spAcceptProcess(Nullable<int> processCode, Nullable<int> officeCode, Nullable<int> processYear, string processNumber, Nullable<int> userCodeAccept, string ipAccept, string incommingNumber)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var officeCodeParameter = officeCode.HasValue ?
                new ObjectParameter("officeCode", officeCode) :
                new ObjectParameter("officeCode", typeof(int));
    
            var processYearParameter = processYear.HasValue ?
                new ObjectParameter("processYear", processYear) :
                new ObjectParameter("processYear", typeof(int));
    
            var processNumberParameter = processNumber != null ?
                new ObjectParameter("processNumber", processNumber) :
                new ObjectParameter("processNumber", typeof(string));
    
            var userCodeAcceptParameter = userCodeAccept.HasValue ?
                new ObjectParameter("userCodeAccept", userCodeAccept) :
                new ObjectParameter("userCodeAccept", typeof(int));
    
            var ipAcceptParameter = ipAccept != null ?
                new ObjectParameter("ipAccept", ipAccept) :
                new ObjectParameter("ipAccept", typeof(string));
    
            var incommingNumberParameter = incommingNumber != null ?
                new ObjectParameter("incommingNumber", incommingNumber) :
                new ObjectParameter("incommingNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spAcceptProcess", processCodeParameter, officeCodeParameter, processYearParameter, processNumberParameter, userCodeAcceptParameter, ipAcceptParameter, incommingNumberParameter);
        }
    
        public virtual ObjectResult<spGetProcessesRefSideCont_Result> spGetProcessesRefSideCont(Nullable<int> userCode, string processCode, string processName, string processNumber, string processTypeCode, string refSideCode, string contactorCode, string documentTypeCode, Nullable<byte> isLimit, Nullable<decimal> fullBudget, Nullable<System.DateTime> dateStartProcess, Nullable<System.DateTime> dateEndProcess, Nullable<int> siteBuildingNumber, string siteAddress, string siteGovermentCode, string siteCenterCode, string siteVillageCode, Nullable<int> userLettersSiteBuildingNumber, string userLettersSiteAddress, string userLettersSiteGovermentCode, string userLettersSiteCenterCode, string userLettersSiteVillageCode, string nameOwnerPermision, string addressOwnerPermision, string subContractorsCode, string missionSubContractorsCode, string workerCode, string careerCode, string nationalID, string insurNum, string refSideInsurNum, string refSideInsurName, string contactorNum, string contactorName, string subContactorNum, string subContactorName, string workerName, string incommingNumber, Nullable<System.DateTime> dateDocument)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var processCodeParameter = processCode != null ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(string));
    
            var processNameParameter = processName != null ?
                new ObjectParameter("processName", processName) :
                new ObjectParameter("processName", typeof(string));
    
            var processNumberParameter = processNumber != null ?
                new ObjectParameter("processNumber", processNumber) :
                new ObjectParameter("processNumber", typeof(string));
    
            var processTypeCodeParameter = processTypeCode != null ?
                new ObjectParameter("processTypeCode", processTypeCode) :
                new ObjectParameter("processTypeCode", typeof(string));
    
            var refSideCodeParameter = refSideCode != null ?
                new ObjectParameter("RefSideCode", refSideCode) :
                new ObjectParameter("RefSideCode", typeof(string));
    
            var contactorCodeParameter = contactorCode != null ?
                new ObjectParameter("ContactorCode", contactorCode) :
                new ObjectParameter("ContactorCode", typeof(string));
    
            var documentTypeCodeParameter = documentTypeCode != null ?
                new ObjectParameter("documentTypeCode", documentTypeCode) :
                new ObjectParameter("documentTypeCode", typeof(string));
    
            var isLimitParameter = isLimit.HasValue ?
                new ObjectParameter("isLimit", isLimit) :
                new ObjectParameter("isLimit", typeof(byte));
    
            var fullBudgetParameter = fullBudget.HasValue ?
                new ObjectParameter("fullBudget", fullBudget) :
                new ObjectParameter("fullBudget", typeof(decimal));
    
            var dateStartProcessParameter = dateStartProcess.HasValue ?
                new ObjectParameter("dateStartProcess", dateStartProcess) :
                new ObjectParameter("dateStartProcess", typeof(System.DateTime));
    
            var dateEndProcessParameter = dateEndProcess.HasValue ?
                new ObjectParameter("dateEndProcess", dateEndProcess) :
                new ObjectParameter("dateEndProcess", typeof(System.DateTime));
    
            var siteBuildingNumberParameter = siteBuildingNumber.HasValue ?
                new ObjectParameter("siteBuildingNumber", siteBuildingNumber) :
                new ObjectParameter("siteBuildingNumber", typeof(int));
    
            var siteAddressParameter = siteAddress != null ?
                new ObjectParameter("siteAddress", siteAddress) :
                new ObjectParameter("siteAddress", typeof(string));
    
            var siteGovermentCodeParameter = siteGovermentCode != null ?
                new ObjectParameter("siteGovermentCode", siteGovermentCode) :
                new ObjectParameter("siteGovermentCode", typeof(string));
    
            var siteCenterCodeParameter = siteCenterCode != null ?
                new ObjectParameter("siteCenterCode", siteCenterCode) :
                new ObjectParameter("siteCenterCode", typeof(string));
    
            var siteVillageCodeParameter = siteVillageCode != null ?
                new ObjectParameter("siteVillageCode", siteVillageCode) :
                new ObjectParameter("siteVillageCode", typeof(string));
    
            var userLettersSiteBuildingNumberParameter = userLettersSiteBuildingNumber.HasValue ?
                new ObjectParameter("userLettersSiteBuildingNumber", userLettersSiteBuildingNumber) :
                new ObjectParameter("userLettersSiteBuildingNumber", typeof(int));
    
            var userLettersSiteAddressParameter = userLettersSiteAddress != null ?
                new ObjectParameter("userLettersSiteAddress", userLettersSiteAddress) :
                new ObjectParameter("userLettersSiteAddress", typeof(string));
    
            var userLettersSiteGovermentCodeParameter = userLettersSiteGovermentCode != null ?
                new ObjectParameter("userLettersSiteGovermentCode", userLettersSiteGovermentCode) :
                new ObjectParameter("userLettersSiteGovermentCode", typeof(string));
    
            var userLettersSiteCenterCodeParameter = userLettersSiteCenterCode != null ?
                new ObjectParameter("userLettersSiteCenterCode", userLettersSiteCenterCode) :
                new ObjectParameter("userLettersSiteCenterCode", typeof(string));
    
            var userLettersSiteVillageCodeParameter = userLettersSiteVillageCode != null ?
                new ObjectParameter("userLettersSiteVillageCode", userLettersSiteVillageCode) :
                new ObjectParameter("userLettersSiteVillageCode", typeof(string));
    
            var nameOwnerPermisionParameter = nameOwnerPermision != null ?
                new ObjectParameter("nameOwnerPermision", nameOwnerPermision) :
                new ObjectParameter("nameOwnerPermision", typeof(string));
    
            var addressOwnerPermisionParameter = addressOwnerPermision != null ?
                new ObjectParameter("addressOwnerPermision", addressOwnerPermision) :
                new ObjectParameter("addressOwnerPermision", typeof(string));
    
            var subContractorsCodeParameter = subContractorsCode != null ?
                new ObjectParameter("subContractorsCode", subContractorsCode) :
                new ObjectParameter("subContractorsCode", typeof(string));
    
            var missionSubContractorsCodeParameter = missionSubContractorsCode != null ?
                new ObjectParameter("missionSubContractorsCode", missionSubContractorsCode) :
                new ObjectParameter("missionSubContractorsCode", typeof(string));
    
            var workerCodeParameter = workerCode != null ?
                new ObjectParameter("workerCode", workerCode) :
                new ObjectParameter("workerCode", typeof(string));
    
            var careerCodeParameter = careerCode != null ?
                new ObjectParameter("careerCode", careerCode) :
                new ObjectParameter("careerCode", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("nationalID", nationalID) :
                new ObjectParameter("nationalID", typeof(string));
    
            var insurNumParameter = insurNum != null ?
                new ObjectParameter("insurNum", insurNum) :
                new ObjectParameter("insurNum", typeof(string));
    
            var refSideInsurNumParameter = refSideInsurNum != null ?
                new ObjectParameter("RefSideInsurNum", refSideInsurNum) :
                new ObjectParameter("RefSideInsurNum", typeof(string));
    
            var refSideInsurNameParameter = refSideInsurName != null ?
                new ObjectParameter("RefSideInsurName", refSideInsurName) :
                new ObjectParameter("RefSideInsurName", typeof(string));
    
            var contactorNumParameter = contactorNum != null ?
                new ObjectParameter("ContactorNum", contactorNum) :
                new ObjectParameter("ContactorNum", typeof(string));
    
            var contactorNameParameter = contactorName != null ?
                new ObjectParameter("ContactorName", contactorName) :
                new ObjectParameter("ContactorName", typeof(string));
    
            var subContactorNumParameter = subContactorNum != null ?
                new ObjectParameter("subContactorNum", subContactorNum) :
                new ObjectParameter("subContactorNum", typeof(string));
    
            var subContactorNameParameter = subContactorName != null ?
                new ObjectParameter("subContactorName", subContactorName) :
                new ObjectParameter("subContactorName", typeof(string));
    
            var workerNameParameter = workerName != null ?
                new ObjectParameter("workerName", workerName) :
                new ObjectParameter("workerName", typeof(string));
    
            var incommingNumberParameter = incommingNumber != null ?
                new ObjectParameter("incommingNumber", incommingNumber) :
                new ObjectParameter("incommingNumber", typeof(string));
    
            var dateDocumentParameter = dateDocument.HasValue ?
                new ObjectParameter("dateDocument", dateDocument) :
                new ObjectParameter("dateDocument", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProcessesRefSideCont_Result>("spGetProcessesRefSideCont", userCodeParameter, processCodeParameter, processNameParameter, processNumberParameter, processTypeCodeParameter, refSideCodeParameter, contactorCodeParameter, documentTypeCodeParameter, isLimitParameter, fullBudgetParameter, dateStartProcessParameter, dateEndProcessParameter, siteBuildingNumberParameter, siteAddressParameter, siteGovermentCodeParameter, siteCenterCodeParameter, siteVillageCodeParameter, userLettersSiteBuildingNumberParameter, userLettersSiteAddressParameter, userLettersSiteGovermentCodeParameter, userLettersSiteCenterCodeParameter, userLettersSiteVillageCodeParameter, nameOwnerPermisionParameter, addressOwnerPermisionParameter, subContractorsCodeParameter, missionSubContractorsCodeParameter, workerCodeParameter, careerCodeParameter, nationalIDParameter, insurNumParameter, refSideInsurNumParameter, refSideInsurNameParameter, contactorNumParameter, contactorNameParameter, subContactorNumParameter, subContactorNameParameter, workerNameParameter, incommingNumberParameter, dateDocumentParameter);
        }
    
        public virtual ObjectResult<spGetOfficeProcess_Result> spGetOfficeProcess(Nullable<int> userCode, string spParameters)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var spParametersParameter = spParameters != null ?
                new ObjectParameter("spParameters", spParameters) :
                new ObjectParameter("spParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOfficeProcess_Result>("spGetOfficeProcess", userCodeParameter, spParametersParameter);
        }
    
        public virtual ObjectResult<spGetExpireProcesses_Result> spGetExpireProcesses(Nullable<int> userCode, string spParameters)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var spParametersParameter = spParameters != null ?
                new ObjectParameter("spParameters", spParameters) :
                new ObjectParameter("spParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetExpireProcesses_Result>("spGetExpireProcesses", userCodeParameter, spParametersParameter);
        }
    
        public virtual ObjectResult<spGetMainProcessData_Result> spGetMainProcessData(Nullable<int> processCode, string processNum)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var processNumParameter = processNum != null ?
                new ObjectParameter("processNum", processNum) :
                new ObjectParameter("processNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMainProcessData_Result>("spGetMainProcessData", processCodeParameter, processNumParameter);
        }
    
        public virtual ObjectResult<GetProcessDetails_Result> GetProcessDetails(Nullable<int> processID)
        {
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("processID", processID) :
                new ObjectParameter("processID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProcessDetails_Result>("GetProcessDetails", processIDParameter);
        }
    
        public virtual ObjectResult<GetSubContractors_Result> GetSubContractors(string contractorCode, string missionType, string contractorNational, Nullable<int> processCode, string isSearch)
        {
            var contractorCodeParameter = contractorCode != null ?
                new ObjectParameter("ContractorCode", contractorCode) :
                new ObjectParameter("ContractorCode", typeof(string));
    
            var missionTypeParameter = missionType != null ?
                new ObjectParameter("MissionType", missionType) :
                new ObjectParameter("MissionType", typeof(string));
    
            var contractorNationalParameter = contractorNational != null ?
                new ObjectParameter("ContractorNational", contractorNational) :
                new ObjectParameter("ContractorNational", typeof(string));
    
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("ProcessCode", processCode) :
                new ObjectParameter("ProcessCode", typeof(int));
    
            var isSearchParameter = isSearch != null ?
                new ObjectParameter("isSearch", isSearch) :
                new ObjectParameter("isSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubContractors_Result>("GetSubContractors", contractorCodeParameter, missionTypeParameter, contractorNationalParameter, processCodeParameter, isSearchParameter);
        }
    
        public virtual ObjectResult<string> spInsertReferenceSideContractor(string refSideContName, string refSideContInsuranceNum, Nullable<int> legalEntity, Nullable<bool> isActive, Nullable<int> userCode, Nullable<System.DateTime> dateInsert, string ipInsert)
        {
            var refSideContNameParameter = refSideContName != null ?
                new ObjectParameter("refSideContName", refSideContName) :
                new ObjectParameter("refSideContName", typeof(string));
    
            var refSideContInsuranceNumParameter = refSideContInsuranceNum != null ?
                new ObjectParameter("refSideContInsuranceNum", refSideContInsuranceNum) :
                new ObjectParameter("refSideContInsuranceNum", typeof(string));
    
            var legalEntityParameter = legalEntity.HasValue ?
                new ObjectParameter("legalEntity", legalEntity) :
                new ObjectParameter("legalEntity", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var dateInsertParameter = dateInsert.HasValue ?
                new ObjectParameter("dateInsert", dateInsert) :
                new ObjectParameter("dateInsert", typeof(System.DateTime));
    
            var ipInsertParameter = ipInsert != null ?
                new ObjectParameter("ipInsert", ipInsert) :
                new ObjectParameter("ipInsert", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spInsertReferenceSideContractor", refSideContNameParameter, refSideContInsuranceNumParameter, legalEntityParameter, isActiveParameter, userCodeParameter, dateInsertParameter, ipInsertParameter);
        }
    
        public virtual int SetWorkerNationalOnly(string nationalId)
        {
            var nationalIdParameter = nationalId != null ?
                new ObjectParameter("nationalId", nationalId) :
                new ObjectParameter("nationalId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetWorkerNationalOnly", nationalIdParameter);
        }
    
        public virtual int spUpdateResponseInsuranceWsdlWorker(string nationalID, string responseNatWSDL, string responseNatError, Nullable<System.DateTime> responseNatDate, Nullable<int> userCode)
        {
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("nationalID", nationalID) :
                new ObjectParameter("nationalID", typeof(string));
    
            var responseNatWSDLParameter = responseNatWSDL != null ?
                new ObjectParameter("responseNatWSDL", responseNatWSDL) :
                new ObjectParameter("responseNatWSDL", typeof(string));
    
            var responseNatErrorParameter = responseNatError != null ?
                new ObjectParameter("responseNatError", responseNatError) :
                new ObjectParameter("responseNatError", typeof(string));
    
            var responseNatDateParameter = responseNatDate.HasValue ?
                new ObjectParameter("responseNatDate", responseNatDate) :
                new ObjectParameter("responseNatDate", typeof(System.DateTime));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateResponseInsuranceWsdlWorker", nationalIDParameter, responseNatWSDLParameter, responseNatErrorParameter, responseNatDateParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<spWorkerAttendance_Result> spWorkerAttendance(string processCodes, Nullable<int> userInsertCode, string ipInsert, string sQR, string dateAttendence, string skillDegrees, Nullable<int> testProduction, string attendanceSheetCode)
        {
            var processCodesParameter = processCodes != null ?
                new ObjectParameter("processCodes", processCodes) :
                new ObjectParameter("processCodes", typeof(string));
    
            var userInsertCodeParameter = userInsertCode.HasValue ?
                new ObjectParameter("userInsertCode", userInsertCode) :
                new ObjectParameter("userInsertCode", typeof(int));
    
            var ipInsertParameter = ipInsert != null ?
                new ObjectParameter("ipInsert", ipInsert) :
                new ObjectParameter("ipInsert", typeof(string));
    
            var sQRParameter = sQR != null ?
                new ObjectParameter("sQR", sQR) :
                new ObjectParameter("sQR", typeof(string));
    
            var dateAttendenceParameter = dateAttendence != null ?
                new ObjectParameter("dateAttendence", dateAttendence) :
                new ObjectParameter("dateAttendence", typeof(string));
    
            var skillDegreesParameter = skillDegrees != null ?
                new ObjectParameter("skillDegrees", skillDegrees) :
                new ObjectParameter("skillDegrees", typeof(string));
    
            var testProductionParameter = testProduction.HasValue ?
                new ObjectParameter("testProduction", testProduction) :
                new ObjectParameter("testProduction", typeof(int));
    
            var attendanceSheetCodeParameter = attendanceSheetCode != null ?
                new ObjectParameter("attendanceSheetCode", attendanceSheetCode) :
                new ObjectParameter("attendanceSheetCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spWorkerAttendance_Result>("spWorkerAttendance", processCodesParameter, userInsertCodeParameter, ipInsertParameter, sQRParameter, dateAttendenceParameter, skillDegreesParameter, testProductionParameter, attendanceSheetCodeParameter);
        }
    
        public virtual int spInsertCoverWorkers(string workerAttendanceCodes, string workerCodes, string processCodes, string statusCodes, string statusDescription, string statusDates, string skillDegreeCodes, Nullable<System.DateTime> dateWorkerCover, Nullable<bool> testProduction)
        {
            var workerAttendanceCodesParameter = workerAttendanceCodes != null ?
                new ObjectParameter("workerAttendanceCodes", workerAttendanceCodes) :
                new ObjectParameter("workerAttendanceCodes", typeof(string));
    
            var workerCodesParameter = workerCodes != null ?
                new ObjectParameter("workerCodes", workerCodes) :
                new ObjectParameter("workerCodes", typeof(string));
    
            var processCodesParameter = processCodes != null ?
                new ObjectParameter("processCodes", processCodes) :
                new ObjectParameter("processCodes", typeof(string));
    
            var statusCodesParameter = statusCodes != null ?
                new ObjectParameter("statusCodes", statusCodes) :
                new ObjectParameter("statusCodes", typeof(string));
    
            var statusDescriptionParameter = statusDescription != null ?
                new ObjectParameter("statusDescription", statusDescription) :
                new ObjectParameter("statusDescription", typeof(string));
    
            var statusDatesParameter = statusDates != null ?
                new ObjectParameter("statusDates", statusDates) :
                new ObjectParameter("statusDates", typeof(string));
    
            var skillDegreeCodesParameter = skillDegreeCodes != null ?
                new ObjectParameter("skillDegreeCodes", skillDegreeCodes) :
                new ObjectParameter("skillDegreeCodes", typeof(string));
    
            var dateWorkerCoverParameter = dateWorkerCover.HasValue ?
                new ObjectParameter("dateWorkerCover", dateWorkerCover) :
                new ObjectParameter("dateWorkerCover", typeof(System.DateTime));
    
            var testProductionParameter = testProduction.HasValue ?
                new ObjectParameter("testProduction", testProduction) :
                new ObjectParameter("testProduction", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCoverWorkers", workerAttendanceCodesParameter, workerCodesParameter, processCodesParameter, statusCodesParameter, statusDescriptionParameter, statusDatesParameter, skillDegreeCodesParameter, dateWorkerCoverParameter, testProductionParameter);
        }
    
        public virtual ObjectResult<spGetWorkerHaveInsuranceNumbers_Result> spGetWorkerHaveInsuranceNumbers(Nullable<int> userCode)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWorkerHaveInsuranceNumbers_Result>("spGetWorkerHaveInsuranceNumbers", userCodeParameter);
        }
    
        public virtual ObjectResult<spGetRefSideContractors_Result> spGetRefSideContractors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRefSideContractors_Result>("spGetRefSideContractors");
        }
    
        public virtual ObjectResult<GetContractorRefrence_Result> GetContractorRefrence(string filterType)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("filterType", filterType) :
                new ObjectParameter("filterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractorRefrence_Result>("GetContractorRefrence", filterTypeParameter);
        }
    
        public virtual ObjectResult<spGetRequestProcess_Result> spGetRequestProcess(Nullable<int> userCode, string spParameters)
        {
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("userCode", userCode) :
                new ObjectParameter("userCode", typeof(int));
    
            var spParametersParameter = spParameters != null ?
                new ObjectParameter("spParameters", spParameters) :
                new ObjectParameter("spParameters", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRequestProcess_Result>("spGetRequestProcess", userCodeParameter, spParametersParameter);
        }
    
        public virtual ObjectResult<spGetProcess_Result> spGetProcess(Nullable<int> processCode)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProcess_Result>("spGetProcess", processCodeParameter);
        }
    
        public virtual int spBackProcessToProceeRequest(Nullable<int> processCode, Nullable<int> userBackCode, string ipBack)
        {
            var processCodeParameter = processCode.HasValue ?
                new ObjectParameter("processCode", processCode) :
                new ObjectParameter("processCode", typeof(int));
    
            var userBackCodeParameter = userBackCode.HasValue ?
                new ObjectParameter("userBackCode", userBackCode) :
                new ObjectParameter("userBackCode", typeof(int));
    
            var ipBackParameter = ipBack != null ?
                new ObjectParameter("ipBack", ipBack) :
                new ObjectParameter("ipBack", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBackProcessToProceeRequest", processCodeParameter, userBackCodeParameter, ipBackParameter);
        }
    
        public virtual ObjectResult<spGetRefSideContractorsLegal_Result> spGetRefSideContractorsLegal(Nullable<int> refSideContCode, string refSideContName, string refSideContNum, Nullable<int> legalEntityCode, Nullable<int> isActive)
        {
            var refSideContCodeParameter = refSideContCode.HasValue ?
                new ObjectParameter("refSideContCode", refSideContCode) :
                new ObjectParameter("refSideContCode", typeof(int));
    
            var refSideContNameParameter = refSideContName != null ?
                new ObjectParameter("refSideContName", refSideContName) :
                new ObjectParameter("refSideContName", typeof(string));
    
            var refSideContNumParameter = refSideContNum != null ?
                new ObjectParameter("refSideContNum", refSideContNum) :
                new ObjectParameter("refSideContNum", typeof(string));
    
            var legalEntityCodeParameter = legalEntityCode.HasValue ?
                new ObjectParameter("legalEntityCode", legalEntityCode) :
                new ObjectParameter("legalEntityCode", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRefSideContractorsLegal_Result>("spGetRefSideContractorsLegal", refSideContCodeParameter, refSideContNameParameter, refSideContNumParameter, legalEntityCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetUsersSearch_Result> GetUsersSearch(string fullName, string name, string userType, string filterUserType, string nationalId, string isActive, string address, string email, string phone1, string phone2, string legalEntity, string insuranceNum, string insName, Nullable<int> insertUserCode)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var filterUserTypeParameter = filterUserType != null ?
                new ObjectParameter("FilterUserType", filterUserType) :
                new ObjectParameter("FilterUserType", typeof(string));
    
            var nationalIdParameter = nationalId != null ?
                new ObjectParameter("NationalId", nationalId) :
                new ObjectParameter("NationalId", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phone1Parameter = phone1 != null ?
                new ObjectParameter("Phone1", phone1) :
                new ObjectParameter("Phone1", typeof(string));
    
            var phone2Parameter = phone2 != null ?
                new ObjectParameter("Phone2", phone2) :
                new ObjectParameter("Phone2", typeof(string));
    
            var legalEntityParameter = legalEntity != null ?
                new ObjectParameter("legalEntity", legalEntity) :
                new ObjectParameter("legalEntity", typeof(string));
    
            var insuranceNumParameter = insuranceNum != null ?
                new ObjectParameter("insuranceNum", insuranceNum) :
                new ObjectParameter("insuranceNum", typeof(string));
    
            var insNameParameter = insName != null ?
                new ObjectParameter("insName", insName) :
                new ObjectParameter("insName", typeof(string));
    
            var insertUserCodeParameter = insertUserCode.HasValue ?
                new ObjectParameter("insertUserCode", insertUserCode) :
                new ObjectParameter("insertUserCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersSearch_Result>("GetUsersSearch", fullNameParameter, nameParameter, userTypeParameter, filterUserTypeParameter, nationalIdParameter, isActiveParameter, addressParameter, emailParameter, phone1Parameter, phone2Parameter, legalEntityParameter, insuranceNumParameter, insNameParameter, insertUserCodeParameter);
        }
    }
}
